//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CustomerWCF
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CustomerWCF.ICustomerService")]
    public interface ICustomerService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/FetchCustomer", ReplyAction="http://tempuri.org/ICustomerService/FetchCustomerResponse")]
        System.Collections.Generic.List<Week4.Academy.Test.Core.Models.Customer> FetchCustomer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/FetchCustomer", ReplyAction="http://tempuri.org/ICustomerService/FetchCustomerResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Week4.Academy.Test.Core.Models.Customer>> FetchCustomerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/GetByIDCustomer", ReplyAction="http://tempuri.org/ICustomerService/GetByIDCustomerResponse")]
        Week4.Academy.Test.Core.Models.Customer GetByIDCustomer(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/GetByIDCustomer", ReplyAction="http://tempuri.org/ICustomerService/GetByIDCustomerResponse")]
        System.Threading.Tasks.Task<Week4.Academy.Test.Core.Models.Customer> GetByIDCustomerAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/AddCustomer", ReplyAction="http://tempuri.org/ICustomerService/AddCustomerResponse")]
        bool AddCustomer(Week4.Academy.Test.Core.Models.Customer item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/AddCustomer", ReplyAction="http://tempuri.org/ICustomerService/AddCustomerResponse")]
        System.Threading.Tasks.Task<bool> AddCustomerAsync(Week4.Academy.Test.Core.Models.Customer item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/UpdateCustomer", ReplyAction="http://tempuri.org/ICustomerService/UpdateCustomerResponse")]
        bool UpdateCustomer(Week4.Academy.Test.Core.Models.Customer item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/UpdateCustomer", ReplyAction="http://tempuri.org/ICustomerService/UpdateCustomerResponse")]
        System.Threading.Tasks.Task<bool> UpdateCustomerAsync(Week4.Academy.Test.Core.Models.Customer item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/DeleteByIdCustomer", ReplyAction="http://tempuri.org/ICustomerService/DeleteByIdCustomerResponse")]
        bool DeleteByIdCustomer(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/DeleteByIdCustomer", ReplyAction="http://tempuri.org/ICustomerService/DeleteByIdCustomerResponse")]
        System.Threading.Tasks.Task<bool> DeleteByIdCustomerAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface ICustomerServiceChannel : CustomerWCF.ICustomerService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class CustomerServiceClient : System.ServiceModel.ClientBase<CustomerWCF.ICustomerService>, CustomerWCF.ICustomerService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CustomerServiceClient() : 
                base(CustomerServiceClient.GetDefaultBinding(), CustomerServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ICustomerService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CustomerServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(CustomerServiceClient.GetBindingForEndpoint(endpointConfiguration), CustomerServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CustomerServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CustomerServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CustomerServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CustomerServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CustomerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Collections.Generic.List<Week4.Academy.Test.Core.Models.Customer> FetchCustomer()
        {
            return base.Channel.FetchCustomer();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Week4.Academy.Test.Core.Models.Customer>> FetchCustomerAsync()
        {
            return base.Channel.FetchCustomerAsync();
        }
        
        public Week4.Academy.Test.Core.Models.Customer GetByIDCustomer(int id)
        {
            return base.Channel.GetByIDCustomer(id);
        }
        
        public System.Threading.Tasks.Task<Week4.Academy.Test.Core.Models.Customer> GetByIDCustomerAsync(int id)
        {
            return base.Channel.GetByIDCustomerAsync(id);
        }
        
        public bool AddCustomer(Week4.Academy.Test.Core.Models.Customer item)
        {
            return base.Channel.AddCustomer(item);
        }
        
        public System.Threading.Tasks.Task<bool> AddCustomerAsync(Week4.Academy.Test.Core.Models.Customer item)
        {
            return base.Channel.AddCustomerAsync(item);
        }
        
        public bool UpdateCustomer(Week4.Academy.Test.Core.Models.Customer item)
        {
            return base.Channel.UpdateCustomer(item);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCustomerAsync(Week4.Academy.Test.Core.Models.Customer item)
        {
            return base.Channel.UpdateCustomerAsync(item);
        }
        
        public bool DeleteByIdCustomer(int id)
        {
            return base.Channel.DeleteByIdCustomer(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteByIdCustomerAsync(int id)
        {
            return base.Channel.DeleteByIdCustomerAsync(id);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICustomerService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICustomerService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:7780/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return CustomerServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ICustomerService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return CustomerServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ICustomerService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ICustomerService,
        }
    }
}
